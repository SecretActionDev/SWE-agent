{"instance_id": "sympy__sympy-12419", "model_name_or_path": "250526_anthropic_filemap_simple_review_sbl__claude-sonnet-4__experiments_logs", "model_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..c4154dc8c8 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -876,6 +876,48 @@ def eval_sum(f, limits):\n     if definite and (dif < 100):\n         return eval_sum_direct(f, (i, a, b))\n     if isinstance(f, Piecewise):\n+        # Check if any piece has a condition that exactly matches the summation range\n+        from sympy.logic.boolalg import And\n+        from sympy.core.relational import GreaterThan, LessThan\n+        \n+        for expr, cond in f.args:\n+            if cond == True:\n+                # This is the default case, skip it for now\n+                continue\n+            \n+            # Check if condition is of the form (a <= i) & (i <= b) where a, b match our limits\n+            if isinstance(cond, And) and len(cond.args) == 2:\n+                cond1, cond2 = cond.args\n+                \n+                # Try both orders: (a <= i) & (i <= b) or (i >= a) & (i <= b)\n+                if (isinstance(cond1, (GreaterThan, LessThan)) and \n+                    isinstance(cond2, (GreaterThan, LessThan))):\n+                    \n+                    # Extract the variable and bounds from the conditions\n+                    var1, bound1 = None, None\n+                    var2, bound2 = None, None\n+                    \n+                    if isinstance(cond1, GreaterThan):  # i >= a\n+                        if cond1.lhs == i:\n+                            var1, bound1 = i, cond1.rhs\n+                    elif isinstance(cond1, LessThan):  # a <= i\n+                        if cond1.rhs == i:\n+                            var1, bound1 = i, cond1.lhs\n+                    \n+                    if isinstance(cond2, LessThan):  # i <= b\n+                        if cond2.lhs == i:\n+                            var2, bound2 = i, cond2.rhs\n+                    elif isinstance(cond2, GreaterThan):  # b >= i\n+                        if cond2.rhs == i:\n+                            var2, bound2 = i, cond2.lhs\n+                    \n+                    # Check if the bounds match our summation limits\n+                    if (var1 == i and var2 == i and \n+                        bound1 == a and bound2 == b):\n+                        # The condition exactly matches the summation range\n+                        # So we can sum the expression directly\n+                        return eval_sum(expr, limits)\n+        \n         return None\n     # Try to do it symbolically. Even when the number of terms is known,\n     # this can save time when b-a is big.\ndiff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex b4d759836e..cd6770d69b 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -476,10 +476,8 @@ def conjugate(self):\n         return self\n \n     def _entry(self, i, j):\n-        if i == j:\n-            return S.One\n-        else:\n-            return S.Zero\n+        from sympy import KroneckerDelta\n+        return KroneckerDelta(i, j)\n \n     def _eval_determinant(self):\n         return S.One\n"}