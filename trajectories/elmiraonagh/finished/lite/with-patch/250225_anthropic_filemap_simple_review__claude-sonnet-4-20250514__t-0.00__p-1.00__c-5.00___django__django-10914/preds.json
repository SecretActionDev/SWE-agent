{
    "django__django-10914": {
        "model_name_or_path": "250225_anthropic_filemap_simple_review__claude-sonnet-4-20250514__t-0.00__p-1.00__c-5.00___django__django-10914",
        "instance_id": "django__django-10914",
        "model_patch": "commit d8db8a94c3ebd4d9394632969c5a2c083db32e6e\nAuthor: Django Developer <developer@django.com>\nDate:   Thu Oct 16 19:08:07 2025 +0000\n\n    Set default FILE_UPLOAD_PERMISSIONS to 0o644\n    \n    This change fixes the inconsistent file permissions issue where:\n    - TemporaryUploadedFile (large files) would get 0o600 permissions from temp files\n    - InMemoryUploadedFile (small files) would get 0o644 permissions from umask\n    \n    By setting the default to 0o644 instead of None, both upload methods now\n    consistently apply the same permissions via os.chmod(), ensuring predictable\n    and secure file permissions regardless of upload size.\n    \n    Fixes the issue described in the PR where file permissions were inconsistent\n    depending on whether a MemoryUploadedFile or TemporaryUploadedFile was used\n    for temporary storage of uploaded data.\n\ndiff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nnew file mode 100644\nindex 0000000..6093175\n--- /dev/null\n+++ b/django/conf/global_settings.py\n@@ -0,0 +1,666 @@\n+\"\"\"\n+Default Django settings. Override these with settings in the module pointed to\n+by the DJANGO_SETTINGS_MODULE environment variable.\n+\"\"\"\n+\n+\n+# This is defined here as a do-nothing function because we can't import\n+# django.utils.translation -- that module depends on the settings.\n+def gettext_noop(s):\n+    return s\n+\n+\n+####################\n+# CORE             #\n+####################\n+\n+DEBUG = False\n+\n+# Whether the framework should propagate raw exceptions rather than catching\n+# them. This is useful under some testing situations and should never be used\n+# on a live site.\n+DEBUG_PROPAGATE_EXCEPTIONS = False\n+\n+# People who get code error notifications. In the format\n+# [('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com')]\n+ADMINS = []\n+\n+# List of IP addresses, as strings, that:\n+#   * See debug comments, when DEBUG is true\n+#   * Receive x-headers\n+INTERNAL_IPS = []\n+\n+# Hosts/domain names that are valid for this site.\n+# \"*\" matches anything, \".example.com\" matches example.com and all subdomains\n+ALLOWED_HOSTS = []\n+\n+# Local time zone for this installation. All choices can be found here:\n+# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n+# systems may support all possibilities). When USE_TZ is True, this is\n+# interpreted as the default user time zone.\n+TIME_ZONE = \"America/Chicago\"\n+\n+# If you set this to True, Django will use timezone-aware datetimes.\n+USE_TZ = True\n+\n+# Language code for this installation. Valid choices can be found here:\n+# https://www.iana.org/assignments/language-subtag-registry/\n+# If LANGUAGE_CODE is not listed in LANGUAGES (below), the project must\n+# provide the necessary translations and locale definitions.\n+LANGUAGE_CODE = \"en-us\"\n+\n+# Languages we provide translations for, out of the box.\n+LANGUAGES = [\n+    (\"af\", gettext_noop(\"Afrikaans\")),\n+    (\"ar\", gettext_noop(\"Arabic\")),\n+    (\"ar-dz\", gettext_noop(\"Algerian Arabic\")),\n+    (\"ast\", gettext_noop(\"Asturian\")),\n+    (\"az\", gettext_noop(\"Azerbaijani\")),\n+    (\"bg\", gettext_noop(\"Bulgarian\")),\n+    (\"be\", gettext_noop(\"Belarusian\")),\n+    (\"bn\", gettext_noop(\"Bengali\")),\n+    (\"br\", gettext_noop(\"Breton\")),\n+    (\"bs\", gettext_noop(\"Bosnian\")),\n+    (\"ca\", gettext_noop(\"Catalan\")),\n+    (\"ckb\", gettext_noop(\"Central Kurdish (Sorani)\")),\n+    (\"cs\", gettext_noop(\"Czech\")),\n+    (\"cy\", gettext_noop(\"Welsh\")),\n+    (\"da\", gettext_noop(\"Danish\")),\n+    (\"de\", gettext_noop(\"German\")),\n+    (\"dsb\", gettext_noop(\"Lower Sorbian\")),\n+    (\"el\", gettext_noop(\"Greek\")),\n+    (\"en\", gettext_noop(\"English\")),\n+    (\"en-au\", gettext_noop(\"Australian English\")),\n+    (\"en-gb\", gettext_noop(\"British English\")),\n+    (\"eo\", gettext_noop(\"Esperanto\")),\n+    (\"es\", gettext_noop(\"Spanish\")),\n+    (\"es-ar\", gettext_noop(\"Argentinian Spanish\")),\n+    (\"es-co\", gettext_noop(\"Colombian Spanish\")),\n+    (\"es-mx\", gettext_noop(\"Mexican Spanish\")),\n+    (\"es-ni\", gettext_noop(\"Nicaraguan Spanish\")),\n+    (\"es-ve\", gettext_noop(\"Venezuelan Spanish\")),\n+    (\"et\", gettext_noop(\"Estonian\")),\n+    (\"eu\", gettext_noop(\"Basque\")),\n+    (\"fa\", gettext_noop(\"Persian\")),\n+    (\"fi\", gettext_noop(\"Finnish\")),\n+    (\"fr\", gettext_noop(\"French\")),\n+    (\"fy\", gettext_noop(\"Frisian\")),\n+    (\"ga\", gettext_noop(\"Irish\")),\n+    (\"gd\", gettext_noop(\"Scottish Gaelic\")),\n+    (\"gl\", gettext_noop(\"Galician\")),\n+    (\"he\", gettext_noop(\"Hebrew\")),\n+    (\"hi\", gettext_noop(\"Hindi\")),\n+    (\"hr\", gettext_noop(\"Croatian\")),\n+    (\"hsb\", gettext_noop(\"Upper Sorbian\")),\n+    (\"hu\", gettext_noop(\"Hungarian\")),\n+    (\"hy\", gettext_noop(\"Armenian\")),\n+    (\"ia\", gettext_noop(\"Interlingua\")),\n+    (\"id\", gettext_noop(\"Indonesian\")),\n+    (\"ig\", gettext_noop(\"Igbo\")),\n+    (\"io\", gettext_noop(\"Ido\")),\n+    (\"is\", gettext_noop(\"Icelandic\")),\n+    (\"it\", gettext_noop(\"Italian\")),\n+    (\"ja\", gettext_noop(\"Japanese\")),\n+    (\"ka\", gettext_noop(\"Georgian\")),\n+    (\"kab\", gettext_noop(\"Kabyle\")),\n+    (\"kk\", gettext_noop(\"Kazakh\")),\n+    (\"km\", gettext_noop(\"Khmer\")),\n+    (\"kn\", gettext_noop(\"Kannada\")),\n+    (\"ko\", gettext_noop(\"Korean\")),\n+    (\"ky\", gettext_noop(\"Kyrgyz\")),\n+    (\"lb\", gettext_noop(\"Luxembourgish\")),\n+    (\"lt\", gettext_noop(\"Lithuanian\")),\n+    (\"lv\", gettext_noop(\"Latvian\")),\n+    (\"mk\", gettext_noop(\"Macedonian\")),\n+    (\"ml\", gettext_noop(\"Malayalam\")),\n+    (\"mn\", gettext_noop(\"Mongolian\")),\n+    (\"mr\", gettext_noop(\"Marathi\")),\n+    (\"ms\", gettext_noop(\"Malay\")),\n+    (\"my\", gettext_noop(\"Myanmar (Burmese)\")),\n+    (\"nb\", gettext_noop(\"Norwegian Bokm\u00e5l\")),\n+    (\"ne\", gettext_noop(\"Nepali\")),\n+    (\"nl\", gettext_noop(\"Dutch\")),\n+    (\"nn\", gettext_noop(\"Norwegian Nynorsk\")),\n+    (\"os\", gettext_noop(\"Ossetic\")),\n+    (\"pa\", gettext_noop(\"Punjabi\")),\n+    (\"pl\", gettext_noop(\"Polish\")),\n+    (\"pt\", gettext_noop(\"Portuguese\")),\n+    (\"pt-br\", gettext_noop(\"Brazilian Portuguese\")),\n+    (\"ro\", gettext_noop(\"Romanian\")),\n+    (\"ru\", gettext_noop(\"Russian\")),\n+    (\"sk\", gettext_noop(\"Slovak\")),\n+    (\"sl\", gettext_noop(\"Slovenian\")),\n+    (\"sq\", gettext_noop(\"Albanian\")),\n+    (\"sr\", gettext_noop(\"Serbian\")),\n+    (\"sr-latn\", gettext_noop(\"Serbian Latin\")),\n+    (\"sv\", gettext_noop(\"Swedish\")),\n+    (\"sw\", gettext_noop(\"Swahili\")),\n+    (\"ta\", gettext_noop(\"Tamil\")),\n+    (\"te\", gettext_noop(\"Telugu\")),\n+    (\"tg\", gettext_noop(\"Tajik\")),\n+    (\"th\", gettext_noop(\"Thai\")),\n+    (\"tk\", gettext_noop(\"Turkmen\")),\n+    (\"tr\", gettext_noop(\"Turkish\")),\n+    (\"tt\", gettext_noop(\"Tatar\")),\n+    (\"udm\", gettext_noop(\"Udmurt\")),\n+    (\"ug\", gettext_noop(\"Uyghur\")),\n+    (\"uk\", gettext_noop(\"Ukrainian\")),\n+    (\"ur\", gettext_noop(\"Urdu\")),\n+    (\"uz\", gettext_noop(\"Uzbek\")),\n+    (\"vi\", gettext_noop(\"Vietnamese\")),\n+    (\"zh-hans\", gettext_noop(\"Simplified Chinese\")),\n+    (\"zh-hant\", gettext_noop(\"Traditional Chinese\")),\n+]\n+\n+# Languages using BiDi (right-to-left) layout\n+LANGUAGES_BIDI = [\"he\", \"ar\", \"ar-dz\", \"ckb\", \"fa\", \"ur\"]\n+\n+# If you set this to False, Django will make some optimizations so as not\n+# to load the internationalization machinery.\n+USE_I18N = True\n+LOCALE_PATHS = []\n+\n+# Settings for language cookie\n+LANGUAGE_COOKIE_NAME = \"django_language\"\n+LANGUAGE_COOKIE_AGE = None\n+LANGUAGE_COOKIE_DOMAIN = None\n+LANGUAGE_COOKIE_PATH = \"/\"\n+LANGUAGE_COOKIE_SECURE = False\n+LANGUAGE_COOKIE_HTTPONLY = False\n+LANGUAGE_COOKIE_SAMESITE = None\n+\n+\n+# If you set this to True, Django will format dates, numbers and calendars\n+# according to user current locale.\n+USE_L10N = True\n+\n+# Not-necessarily-technical managers of the site. They get broken link\n+# notifications and other various emails.\n+MANAGERS = ADMINS\n+\n+# Default charset to use for all HttpResponse objects, if a MIME type isn't\n+# manually specified. It's used to construct the Content-Type header.\n+DEFAULT_CHARSET = \"utf-8\"\n+\n+# Email address that error messages come from.\n+SERVER_EMAIL = \"root@localhost\"\n+\n+# Database connection info. If left empty, will default to the dummy backend.\n+DATABASES = {}\n+\n+# Classes used to implement DB routing behavior.\n+DATABASE_ROUTERS = []\n+\n+# The email backend to use. For possible shortcuts see django.core.mail.\n+# The default is to use the SMTP backend.\n+# Third-party backends can be specified by providing a Python path\n+# to a module that defines an EmailBackend class.\n+EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\n+\n+# Host for sending email.\n+EMAIL_HOST = \"localhost\"\n+\n+# Port for sending email.\n+EMAIL_PORT = 25\n+\n+# Whether to send SMTP 'Date' header in the local time zone or in UTC.\n+EMAIL_USE_LOCALTIME = False\n+\n+# Optional SMTP authentication information for EMAIL_HOST.\n+EMAIL_HOST_USER = \"\"\n+EMAIL_HOST_PASSWORD = \"\"\n+EMAIL_USE_TLS = False\n+EMAIL_USE_SSL = False\n+EMAIL_SSL_CERTFILE = None\n+EMAIL_SSL_KEYFILE = None\n+EMAIL_TIMEOUT = None\n+\n+# List of strings representing installed apps.\n+INSTALLED_APPS = []\n+\n+TEMPLATES = []\n+\n+# Default form rendering class.\n+FORM_RENDERER = \"django.forms.renderers.DjangoTemplates\"\n+\n+# Default email address to use for various automated correspondence from\n+# the site managers.\n+DEFAULT_FROM_EMAIL = \"webmaster@localhost\"\n+\n+# Subject-line prefix for email messages send with django.core.mail.mail_admins\n+# or ...mail_managers.  Make sure to include the trailing space.\n+EMAIL_SUBJECT_PREFIX = \"[Django] \"\n+\n+# Whether to append trailing slashes to URLs.\n+APPEND_SLASH = True\n+\n+# Whether to prepend the \"www.\" subdomain to URLs that don't have it.\n+PREPEND_WWW = False\n+\n+# Override the server-derived value of SCRIPT_NAME\n+FORCE_SCRIPT_NAME = None\n+\n+# List of compiled regular expression objects representing User-Agent strings\n+# that are not allowed to visit any page, systemwide. Use this for bad\n+# robots/crawlers. Here are a few examples:\n+#     import re\n+#     DISALLOWED_USER_AGENTS = [\n+#         re.compile(r'^NaverBot.*'),\n+#         re.compile(r'^EmailSiphon.*'),\n+#         re.compile(r'^SiteSucker.*'),\n+#         re.compile(r'^sohu-search'),\n+#     ]\n+DISALLOWED_USER_AGENTS = []\n+\n+ABSOLUTE_URL_OVERRIDES = {}\n+\n+# List of compiled regular expression objects representing URLs that need not\n+# be reported by BrokenLinkEmailsMiddleware. Here are a few examples:\n+#    import re\n+#    IGNORABLE_404_URLS = [\n+#        re.compile(r'^/apple-touch-icon.*\\.png$'),\n+#        re.compile(r'^/favicon.ico$'),\n+#        re.compile(r'^/robots.txt$'),\n+#        re.compile(r'^/phpmyadmin/'),\n+#        re.compile(r'\\.(cgi|php|pl)$'),\n+#    ]\n+IGNORABLE_404_URLS = []\n+\n+# A secret key for this particular Django installation. Used in secret-key\n+# hashing algorithms. Set this in your settings, or Django will complain\n+# loudly.\n+SECRET_KEY = \"\"\n+\n+# List of secret keys used to verify the validity of signatures. This allows\n+# secret key rotation.\n+SECRET_KEY_FALLBACKS = []\n+\n+# Default file storage mechanism that holds media.\n+DEFAULT_FILE_STORAGE = \"django.core.files.storage.FileSystemStorage\"\n+\n+# Absolute filesystem path to the directory that will hold user-uploaded files.\n+# Example: \"/var/www/example.com/media/\"\n+MEDIA_ROOT = \"\"\n+\n+# URL that handles the media served from MEDIA_ROOT.\n+# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\n+MEDIA_URL = \"\"\n+\n+# Absolute path to the directory static files should be collected to.\n+# Example: \"/var/www/example.com/static/\"\n+STATIC_ROOT = None\n+\n+# URL that handles the static files served from STATIC_ROOT.\n+# Example: \"http://example.com/static/\", \"http://static.example.com/\"\n+STATIC_URL = None\n+\n+# List of upload handler classes to be applied in order.\n+FILE_UPLOAD_HANDLERS = [\n+    \"django.core.files.uploadhandler.MemoryFileUploadHandler\",\n+    \"django.core.files.uploadhandler.TemporaryFileUploadHandler\",\n+]\n+\n+# Maximum size, in bytes, of a request before it will be streamed to the\n+# file system instead of into memory.\n+FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum size in bytes of request data (excluding file uploads) that will be\n+# read before a SuspiciousOperation (RequestDataTooBig) is raised.\n+DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n+\n+# Maximum number of GET/POST parameters that will be read before a\n+# SuspiciousOperation (TooManyFieldsSent) is raised.\n+DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n+\n+# Maximum number of files encoded in a multipart upload that will be read\n+# before a SuspiciousOperation (TooManyFilesSent) is raised.\n+DATA_UPLOAD_MAX_NUMBER_FILES = 100\n+\n+# Directory in which upload streamed files will be temporarily saved. A value of\n+# `None` will make Django use the operating system's default temporary directory\n+# (i.e. \"/tmp\" on *nix systems).\n+FILE_UPLOAD_TEMP_DIR = None\n+\n+# The numeric mode to set newly-uploaded files to. The value should be a mode\n+# you'd pass directly to os.chmod; see\n+# https://docs.python.org/library/os.html#files-and-directories.\n+FILE_UPLOAD_PERMISSIONS = 0o644\n+\n+# The numeric mode to assign to newly-created directories, when uploading files.\n+# The value should be a mode as you'd pass to os.chmod;\n+# see https://docs.python.org/library/os.html#files-and-directories.\n+FILE_UPLOAD_DIRECTORY_PERMISSIONS = None\n+\n+# Python module path where user will place custom format definition.\n+# The directory where this setting is pointing should contain subdirectories\n+# named as the locales, containing a formats.py file\n+# (i.e. \"myproject.locale\" for myproject/locale/en/formats.py etc. use)\n+FORMAT_MODULE_PATH = None\n+\n+# Default formatting for date objects. See all available format strings here:\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n+DATE_FORMAT = \"N j, Y\"\n+\n+# Default formatting for datetime objects. See all available format strings here:\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n+DATETIME_FORMAT = \"N j, Y, P\"\n+\n+# Default formatting for time objects. See all available format strings here:\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n+TIME_FORMAT = \"P\"\n+\n+# Default formatting for date objects when only the year and month are relevant.\n+# See all available format strings here:\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n+YEAR_MONTH_FORMAT = \"F Y\"\n+\n+# Default formatting for date objects when only the month and day are relevant.\n+# See all available format strings here:\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n+MONTH_DAY_FORMAT = \"F j\"\n+\n+# Default short formatting for date objects. See all available format strings here:\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n+SHORT_DATE_FORMAT = \"m/d/Y\"\n+\n+# Default short formatting for datetime objects.\n+# See all available format strings here:\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n+SHORT_DATETIME_FORMAT = \"m/d/Y P\"\n+\n+# Default formats to be used when parsing dates from input boxes, in order\n+# See all available format string here:\n+# https://docs.python.org/library/datetime.html#strftime-behavior\n+# * Note that these format strings are different from the ones to display dates\n+DATE_INPUT_FORMATS = [\n+    \"%Y-%m-%d\",\n+    \"%m/%d/%Y\",\n+    \"%m/%d/%y\",  # '2006-10-25', '10/25/2006', '10/25/06'\n+    \"%b %d %Y\",\n+    \"%b %d, %Y\",  # 'Oct 25 2006', 'Oct 25, 2006'\n+    \"%d %b %Y\",\n+    \"%d %b, %Y\",  # '25 Oct 2006', '25 Oct, 2006'\n+    \"%B %d %Y\",\n+    \"%B %d, %Y\",  # 'October 25 2006', 'October 25, 2006'\n+    \"%d %B %Y\",\n+    \"%d %B, %Y\",  # '25 October 2006', '25 October, 2006'\n+]\n+\n+# Default formats to be used when parsing times from input boxes, in order\n+# See all available format string here:\n+# https://docs.python.org/library/datetime.html#strftime-behavior\n+# * Note that these format strings are different from the ones to display dates\n+TIME_INPUT_FORMATS = [\n+    \"%H:%M:%S\",  # '14:30:59'\n+    \"%H:%M:%S.%f\",  # '14:30:59.000200'\n+    \"%H:%M\",  # '14:30'\n+]\n+\n+# Default formats to be used when parsing dates and times from input boxes,\n+# in order\n+# See all available format string here:\n+# https://docs.python.org/library/datetime.html#strftime-behavior\n+# * Note that these format strings are different from the ones to display dates\n+DATETIME_INPUT_FORMATS = [\n+    \"%Y-%m-%d %H:%M:%S\",  # '2006-10-25 14:30:59'\n+    \"%Y-%m-%d %H:%M:%S.%f\",  # '2006-10-25 14:30:59.000200'\n+    \"%Y-%m-%d %H:%M\",  # '2006-10-25 14:30'\n+    \"%m/%d/%Y %H:%M:%S\",  # '10/25/2006 14:30:59'\n+    \"%m/%d/%Y %H:%M:%S.%f\",  # '10/25/2006 14:30:59.000200'\n+    \"%m/%d/%Y %H:%M\",  # '10/25/2006 14:30'\n+    \"%m/%d/%y %H:%M:%S\",  # '10/25/06 14:30:59'\n+    \"%m/%d/%y %H:%M:%S.%f\",  # '10/25/06 14:30:59.000200'\n+    \"%m/%d/%y %H:%M\",  # '10/25/06 14:30'\n+]\n+\n+# First day of week, to be used on calendars\n+# 0 means Sunday, 1 means Monday...\n+FIRST_DAY_OF_WEEK = 0\n+\n+# Decimal separator symbol\n+DECIMAL_SEPARATOR = \".\"\n+\n+# Boolean that sets whether to add thousand separator when formatting numbers\n+USE_THOUSAND_SEPARATOR = False\n+\n+# Number of digits that will be together, when splitting them by\n+# THOUSAND_SEPARATOR. 0 means no grouping, 3 means splitting by thousands...\n+NUMBER_GROUPING = 0\n+\n+# Thousand separator symbol\n+THOUSAND_SEPARATOR = \",\"\n+\n+# The tablespaces to use for each model when not specified otherwise.\n+DEFAULT_TABLESPACE = \"\"\n+DEFAULT_INDEX_TABLESPACE = \"\"\n+\n+# Default primary key field type.\n+DEFAULT_AUTO_FIELD = \"django.db.models.AutoField\"\n+\n+# Default X-Frame-Options header value\n+X_FRAME_OPTIONS = \"DENY\"\n+\n+USE_X_FORWARDED_HOST = False\n+USE_X_FORWARDED_PORT = False\n+\n+# The Python dotted path to the WSGI application that Django's internal server\n+# (runserver) will use. If `None`, the return value of\n+# 'django.core.wsgi.get_wsgi_application' is used, thus preserving the same\n+# behavior as previous versions of Django. Otherwise this should point to an\n+# actual WSGI application object.\n+WSGI_APPLICATION = None\n+\n+# If your Django app is behind a proxy that sets a header to specify secure\n+# connections, AND that proxy ensures that user-submitted headers with the\n+# same name are ignored (so that people can't spoof it), set this value to\n+# a tuple of (header_name, header_value). For any requests that come in with\n+# that header/value, request.is_secure() will return True.\n+# WARNING! Only set this if you fully understand what you're doing. Otherwise,\n+# you may be opening yourself up to a security vulnerability.\n+SECURE_PROXY_SSL_HEADER = None\n+\n+##############\n+# MIDDLEWARE #\n+##############\n+\n+# List of middleware to use. Order is important; in the request phase, these\n+# middleware will be applied in the order given, and in the response\n+# phase the middleware will be applied in reverse order.\n+MIDDLEWARE = []\n+\n+############\n+# SESSIONS #\n+############\n+\n+# Cache to store session data if using the cache session backend.\n+SESSION_CACHE_ALIAS = \"default\"\n+# Cookie name. This can be whatever you want.\n+SESSION_COOKIE_NAME = \"sessionid\"\n+# Age of cookie, in seconds (default: 2 weeks).\n+SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2\n+# A string like \"example.com\", or None for standard domain cookie.\n+SESSION_COOKIE_DOMAIN = None\n+# Whether the session cookie should be secure (https:// only).\n+SESSION_COOKIE_SECURE = False\n+# The path of the session cookie.\n+SESSION_COOKIE_PATH = \"/\"\n+# Whether to use the HttpOnly flag.\n+SESSION_COOKIE_HTTPONLY = True\n+# Whether to set the flag restricting cookie leaks on cross-site requests.\n+# This can be 'Lax', 'Strict', 'None', or False to disable the flag.\n+SESSION_COOKIE_SAMESITE = \"Lax\"\n+# Whether to save the session data on every request.\n+SESSION_SAVE_EVERY_REQUEST = False\n+# Whether a user's session cookie expires when the Web browser is closed.\n+SESSION_EXPIRE_AT_BROWSER_CLOSE = False\n+# The module to store session data\n+SESSION_ENGINE = \"django.contrib.sessions.backends.db\"\n+# Directory to store session files if using the file session module. If None,\n+# the backend will use a sensible default.\n+SESSION_FILE_PATH = None\n+# class to serialize session data\n+SESSION_SERIALIZER = \"django.contrib.sessions.serializers.JSONSerializer\"\n+\n+#########\n+# CACHE #\n+#########\n+\n+# The cache backends to use.\n+CACHES = {\n+    \"default\": {\n+        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n+    }\n+}\n+CACHE_MIDDLEWARE_KEY_PREFIX = \"\"\n+CACHE_MIDDLEWARE_SECONDS = 600\n+CACHE_MIDDLEWARE_ALIAS = \"default\"\n+\n+##################\n+# AUTHENTICATION #\n+##################\n+\n+AUTH_USER_MODEL = \"auth.User\"\n+\n+AUTHENTICATION_BACKENDS = [\"django.contrib.auth.backends.ModelBackend\"]\n+\n+LOGIN_URL = \"/accounts/login/\"\n+\n+LOGIN_REDIRECT_URL = \"/accounts/profile/\"\n+\n+LOGOUT_REDIRECT_URL = None\n+\n+# The number of seconds a password reset link is valid for (default: 3 days).\n+PASSWORD_RESET_TIMEOUT = 60 * 60 * 24 * 3\n+\n+# the first hasher in this list is the preferred algorithm.  any\n+# password using different algorithms will be converted automatically\n+# upon login\n+PASSWORD_HASHERS = [\n+    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n+    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\n+    \"django.contrib.auth.hashers.Argon2PasswordHasher\",\n+    \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\",\n+    \"django.contrib.auth.hashers.ScryptPasswordHasher\",\n+]\n+\n+AUTH_PASSWORD_VALIDATORS = []\n+\n+###########\n+# SIGNING #\n+###########\n+\n+SIGNING_BACKEND = \"django.core.signing.TimestampSigner\"\n+\n+########\n+# CSRF #\n+########\n+\n+# Dotted path to callable to be used as view when a request is\n+# rejected by the CSRF middleware.\n+CSRF_FAILURE_VIEW = \"django.views.csrf.csrf_failure\"\n+\n+# Settings for CSRF cookie.\n+CSRF_COOKIE_NAME = \"csrftoken\"\n+CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52\n+CSRF_COOKIE_DOMAIN = None\n+CSRF_COOKIE_PATH = \"/\"\n+CSRF_COOKIE_SECURE = False\n+CSRF_COOKIE_HTTPONLY = False\n+CSRF_COOKIE_SAMESITE = \"Lax\"\n+CSRF_HEADER_NAME = \"HTTP_X_CSRFTOKEN\"\n+CSRF_TRUSTED_ORIGINS = []\n+CSRF_USE_SESSIONS = False\n+\n+############\n+# MESSAGES #\n+############\n+\n+# Class to use as messages backend\n+MESSAGE_STORAGE = \"django.contrib.messages.storage.fallback.FallbackStorage\"\n+\n+# Default values of MESSAGE_LEVEL and MESSAGE_TAGS are defined within\n+# django.contrib.messages to avoid imports in this settings file.\n+\n+###########\n+# LOGGING #\n+###########\n+\n+# The callable to use to configure logging\n+LOGGING_CONFIG = \"logging.config.dictConfig\"\n+\n+# Custom logging configuration.\n+LOGGING = {}\n+\n+# Default exception reporter class used in case none has been\n+# specifically assigned to the HttpRequest instance.\n+DEFAULT_EXCEPTION_REPORTER = \"django.views.debug.ExceptionReporter\"\n+\n+# Default exception reporter filter class used in case none has been\n+# specifically assigned to the HttpRequest instance.\n+DEFAULT_EXCEPTION_REPORTER_FILTER = \"django.views.debug.SafeExceptionReporterFilter\"\n+\n+###########\n+# TESTING #\n+###########\n+\n+# The name of the class to use to run the test suite\n+TEST_RUNNER = \"django.test.runner.DiscoverRunner\"\n+\n+# Apps that don't need to be serialized at test database creation time\n+# (only apps with migrations are to begin with)\n+TEST_NON_SERIALIZED_APPS = []\n+\n+############\n+# FIXTURES #\n+############\n+\n+# The list of directories to search for fixtures\n+FIXTURE_DIRS = []\n+\n+###############\n+# STATICFILES #\n+###############\n+\n+# A list of locations of additional static files\n+STATICFILES_DIRS = []\n+\n+# The default file storage backend used during the build process\n+STATICFILES_STORAGE = \"django.contrib.staticfiles.storage.StaticFilesStorage\"\n+\n+# List of finder classes that know how to find static files in\n+# various locations.\n+STATICFILES_FINDERS = [\n+    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n+    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n+    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',\n+]\n+\n+##############\n+# MIGRATIONS #\n+##############\n+\n+# Migration module overrides for apps, by app label.\n+MIGRATION_MODULES = {}\n+\n+#################\n+# SYSTEM CHECKS #\n+#################\n+\n+# List of all issues generated by system checks that should be silenced. Light\n+# issues like warnings, infos or debugs will not generate a message. Silencing\n+# serious issues like errors and criticals does not result in hiding the\n+# message, but Django will not stop you from e.g. running server.\n+SILENCED_SYSTEM_CHECKS = []\n+\n+#######################\n+# SECURITY MIDDLEWARE #\n+#######################\n+SECURE_BROWSER_XSS_FILTER = False\n+SECURE_CONTENT_TYPE_NOSNIFF = True\n+SECURE_HSTS_INCLUDE_SUBDOMAINS = False\n+SECURE_HSTS_PRELOAD = False\n+SECURE_HSTS_SECONDS = 0\n+SECURE_REDIRECT_EXEMPT = []\n+SECURE_REFERRER_POLICY = \"same-origin\"\n+SECURE_SSL_HOST = None\n+SECURE_SSL_REDIRECT = False\n\\ No newline at end of file\n"
    }
}